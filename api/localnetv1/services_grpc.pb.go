// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: api/localnetv1/services.proto

package localnetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalClient is the client API for Local service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalClient interface {
	// Returns all the endpoints for this node.
	Watch(ctx context.Context, opts ...grpc.CallOption) (Local_WatchClient, error)
}

type localClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalClient(cc grpc.ClientConnInterface) LocalClient {
	return &localClient{cc}
}

func (c *localClient) Watch(ctx context.Context, opts ...grpc.CallOption) (Local_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Local_ServiceDesc.Streams[0], "/localnetv1.Local/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWatchClient{stream}
	return x, nil
}

type Local_WatchClient interface {
	Send(*WatchReq) error
	Recv() (*OpItem, error)
	grpc.ClientStream
}

type localWatchClient struct {
	grpc.ClientStream
}

func (x *localWatchClient) Send(m *WatchReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWatchClient) Recv() (*OpItem, error) {
	m := new(OpItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalServer is the server API for Local service.
// All implementations must embed UnimplementedLocalServer
// for forward compatibility
type LocalServer interface {
	// Returns all the endpoints for this node.
	Watch(Local_WatchServer) error
	mustEmbedUnimplementedLocalServer()
}

// UnimplementedLocalServer must be embedded to have forward compatible implementations.
type UnimplementedLocalServer struct {
}

func (UnimplementedLocalServer) Watch(Local_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedLocalServer) mustEmbedUnimplementedLocalServer() {}

// UnsafeLocalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalServer will
// result in compilation errors.
type UnsafeLocalServer interface {
	mustEmbedUnimplementedLocalServer()
}

func RegisterLocalServer(s grpc.ServiceRegistrar, srv LocalServer) {
	s.RegisterService(&Local_ServiceDesc, srv)
}

func _Local_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalServer).Watch(&localWatchServer{stream})
}

type Local_WatchServer interface {
	Send(*OpItem) error
	Recv() (*WatchReq, error)
	grpc.ServerStream
}

type localWatchServer struct {
	grpc.ServerStream
}

func (x *localWatchServer) Send(m *OpItem) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWatchServer) Recv() (*WatchReq, error) {
	m := new(WatchReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Local_ServiceDesc is the grpc.ServiceDesc for Local service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Local_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localnetv1.Local",
	HandlerType: (*LocalServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Local_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/localnetv1/services.proto",
}

// GlobalClient is the client API for Global service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalClient interface {
	Watch(ctx context.Context, opts ...grpc.CallOption) (Global_WatchClient, error)
}

type globalClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalClient(cc grpc.ClientConnInterface) GlobalClient {
	return &globalClient{cc}
}

func (c *globalClient) Watch(ctx context.Context, opts ...grpc.CallOption) (Global_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Global_ServiceDesc.Streams[0], "/localnetv1.Global/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalWatchClient{stream}
	return x, nil
}

type Global_WatchClient interface {
	Send(*GlobalWatchReq) error
	Recv() (*OpItem, error)
	grpc.ClientStream
}

type globalWatchClient struct {
	grpc.ClientStream
}

func (x *globalWatchClient) Send(m *GlobalWatchReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *globalWatchClient) Recv() (*OpItem, error) {
	m := new(OpItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalServer is the server API for Global service.
// All implementations must embed UnimplementedGlobalServer
// for forward compatibility
type GlobalServer interface {
	Watch(Global_WatchServer) error
	mustEmbedUnimplementedGlobalServer()
}

// UnimplementedGlobalServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalServer struct {
}

func (UnimplementedGlobalServer) Watch(Global_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedGlobalServer) mustEmbedUnimplementedGlobalServer() {}

// UnsafeGlobalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalServer will
// result in compilation errors.
type UnsafeGlobalServer interface {
	mustEmbedUnimplementedGlobalServer()
}

func RegisterGlobalServer(s grpc.ServiceRegistrar, srv GlobalServer) {
	s.RegisterService(&Global_ServiceDesc, srv)
}

func _Global_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GlobalServer).Watch(&globalWatchServer{stream})
}

type Global_WatchServer interface {
	Send(*OpItem) error
	Recv() (*GlobalWatchReq, error)
	grpc.ServerStream
}

type globalWatchServer struct {
	grpc.ServerStream
}

func (x *globalWatchServer) Send(m *OpItem) error {
	return x.ServerStream.SendMsg(m)
}

func (x *globalWatchServer) Recv() (*GlobalWatchReq, error) {
	m := new(GlobalWatchReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Global_ServiceDesc is the grpc.ServiceDesc for Global service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Global_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localnetv1.Global",
	HandlerType: (*GlobalServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Global_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/localnetv1/services.proto",
}
